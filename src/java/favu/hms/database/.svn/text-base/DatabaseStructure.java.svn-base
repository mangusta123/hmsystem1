package favu.hms.database;

import java.util.Map;
import java.util.Hashtable;
import java.util.Collection;
import java.util.Vector;
import java.sql.Timestamp;

import favu.hms.model.course.*;
import favu.hms.model.user.*;

/**
 *
 * @author Pierre-Élie Fauché
 */
public class DatabaseStructure {

	public static Collection<String> getTableOrder() {
		Collection order = new Vector();

		order.add("Users");
		order.add("Teacher");
		order.add("Course");
		order.add("TeachingAssistant_Courses");
		order.add("Course_Students");
		order.add("Groups");
		order.add("Group_Members");
		order.add("Homework");
		order.add("Homework_Files");
		order.add("Homework_TAs");
		order.add("HomeworkSubmission");
		order.add("Message");

		return order;
	}

	public static Map<String, DatabaseTable> getTables() {
		Map tables = new Hashtable(8);
		DatabaseTable t;

		// Users
		t = new DatabaseTable("Users", User.class,
						"",
						"idNum");
		t.addColumn(new DatabaseColumn("idNum",		Integer.class,"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("name",		String.class,	"VARCHAR(40)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("password",String.class,	"VARCHAR(20)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("type",		Integer.class,"INTEGER",			"NOT NULL"));
		tables.put(t.getName(), t);

		// Teacher (Instructor or TA)
		t = new DatabaseTable("Teacher", null,
						"FOREIGN KEY (idNum) REFERENCES Users(idNum)",
						"idNum");
		t.addColumn(new DatabaseColumn("idNum",				Integer.class,"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("personalInfo",String.class,	"VARCHAR(400)",	""));
		tables.put(t.getName(), t);

		// Course
		t = new DatabaseTable("Course", Course.class, 
						"FOREIGN KEY (instructorId) REFERENCES Teacher(idNum)",
						"courseId");
		t.addColumn(new DatabaseColumn("courseId",		String.class,	"VARCHAR(15)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("courseDept",	String.class,	"VARCHAR(50)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("courseName",	String.class,	"VARCHAR(50)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("limitUp",			Integer.class,"INTEGER",			""));
		t.addColumn(new DatabaseColumn("available",		Boolean.class,"INTEGER",			""));
		t.addColumn(new DatabaseColumn("courseInfo",	String.class,	"VARCHAR(300)",	""));
		t.addColumn(new DatabaseColumn("instructorId",Integer.class,"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("numOfStud",		Integer.class,"INTEGER",			"DEFAULT 0"));
		tables.put(t.getName(), t);

		// TeachingAssistant_Courses
		t = new DatabaseTable("TeachingAssistant_Courses", null,
						"FOREIGN KEY (taId) REFERENCES Teacher(idNum), " +
						"FOREIGN KEY (courseId) REFERENCES Course(courseId), " +
						"UNIQUE(taId, courseId)",
						"");
		t.addColumn(new DatabaseColumn("taId",		Integer.class, "INTEGER", "NOT NULL"));
		t.addColumn(new DatabaseColumn("courseId",String.class, "VARCHAR(15)", "NOT NULL"));
		tables.put(t.getName(), t);

		// Course_Students
		t = new DatabaseTable("Course_Students", null,
						"FOREIGN KEY (studentId) REFERENCES Users(idNum), " +
						"FOREIGN KEY (courseId) REFERENCES Course(courseId), " +
						"UNIQUE(studentId, courseId)",
						"");
		t.addColumn(new DatabaseColumn("studentId",	Integer.class,	"INTEGER",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("courseId",	String.class,		"VARCHAR(15)","NOT NULL"));
		tables.put(t.getName(), t);

		// Homework
		t = new DatabaseTable("Homework", Homework.class, 
						"FOREIGN KEY (instructorId) REFERENCES Teacher(idNum), " +
						"FOREIGN KEY (courseId) REFERENCES Course(courseId)",
						"homeworkId");
		t.addColumn(new DatabaseColumn("homeworkId",		Integer.class,	"INTEGER",			"NOT NULL GENERATED BY DEFAULT AS IDENTITY"));
		t.addColumn(new DatabaseColumn("courseId",			String.class,		"VARCHAR(15)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("name",					String.class,		"VARCHAR(50)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("assignedDate",	Timestamp.class,"TIMESTAMP",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("dueDate",				Timestamp.class,"TIMESTAMP",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("description",		String.class,		"VARCHAR(300)",	""));
		t.addColumn(new DatabaseColumn("instructorId",	Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("updatable",			Boolean.class,	"INTEGER",			"DEFAULT 0"));
		t.addColumn(new DatabaseColumn("gradingPolicy", String.class,		"VARCHAR(100)", ""));
		tables.put(t.getName(), t);

		// Homework_Files
		t = new DatabaseTable("Homework_Files", null,
						"FOREIGN KEY (homeworkId) REFERENCES Homework(homeworkId), " +
						"UNIQUE (homeworkId, filePath)",
						"");
		t.addColumn(new DatabaseColumn("homeworkId",	Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("filePath",		String.class,		"VARCHAR(200)",	"NOT NULL"));
		tables.put(t.getName(), t);

		// Homework_TAs
		t = new DatabaseTable("Homework_TAs", null, 
						"FOREIGN KEY (homeworkId) REFERENCES Homework(homeworkId), " +
						"FOREIGN KEY (taId) REFERENCES Teacher(idNum), " +
						"UNIQUE (homeworkId, taId)",
						"");
		t.addColumn(new DatabaseColumn("homeworkId",	Integer.class, "INTEGER", "NOT NULL"));
		t.addColumn(new DatabaseColumn("taId",				Integer.class, "INTEGER",	"NOT NULL"));
		tables.put(t.getName(), t);
		
		// HomeworkSubmission
		t = new DatabaseTable("HomeworkSubmission", HWSubmission.class, 
						"FOREIGN KEY (homeworkId) REFERENCES Homework(homeworkId)",
						"homeworkSubmissionId");
		t.addColumn(new DatabaseColumn("homeworkSubmissionId", Integer.class,	"INTEGER", "NOT NULL GENERATED BY DEFAULT AS IDENTITY"));
		t.addColumn(new DatabaseColumn("homeworkId",		Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("submitterId",		Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("submitterType",	Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("submissionDate",Timestamp.class,"TIMESTAMP",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("updateDate",		Timestamp.class,"TIMESTAMP",		""));
		t.addColumn(new DatabaseColumn("message",				String.class,		"VARCHAR(300)", ""));
		t.addColumn(new DatabaseColumn("file",					String.class,		"VARCHAR(200)",	""));
		t.addColumn(new DatabaseColumn("grade",					String.class,		"VARCHAR(50)",	""));
		t.addColumn(new DatabaseColumn("gradeComment",	String.class,		"VARCHAR(300)", ""));
		tables.put(t.getName(), t);

		// Groups
		t = new DatabaseTable("Groups", Group.class, 
						"FOREIGN KEY (courseId) REFERENCES Course(courseId)",
						"groupId");
		t.addColumn(new DatabaseColumn("groupId",				Integer.class,	"INTEGER", "NOT NULL GENERATED BY DEFAULT AS IDENTITY"));
		t.addColumn(new DatabaseColumn("courseId",			String.class,	"VARCHAR(15)",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("name",					String.class,		"VARCHAR(50)",	"NOT NULL"));
		t.addColumn(new DatabaseColumn("creationDate",	Timestamp.class,"TIMESTAMP",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("password",			String.class,		"VARCHAR(20)",	""));
		t.addColumn(new DatabaseColumn("description",		String.class,		"VARCHAR(200)",	""));
		t.addColumn(new DatabaseColumn("maximumMembers",Integer.class,	"INTEGER",			""));
		tables.put(t.getName(), t);

		// Group_Members
		t = new DatabaseTable("Group_Members", null, 
						"FOREIGN KEY (groupId) REFERENCES Groups(groupId), " +
						"FOREIGN KEY (memberId) REFERENCES Users(idNum), " +
						"UNIQUE(groupId, memberId)",
						"");
		t.addColumn(new DatabaseColumn("groupId",		Integer.class, "INTEGER", "NOT NULL"));
		t.addColumn(new DatabaseColumn("memberId",	Integer.class, "INTEGER", "NOT NULL"));
		tables.put(t.getName(), t);

		// Message
		t = new DatabaseTable("Message", Message.class, 
						"FOREIGN KEY (homeworkId) REFERENCES Homework(homeworkId), " +
						"FOREIGN KEY (senderId) REFERENCES Users(idNum)",
						"messageId");
		t.addColumn(new DatabaseColumn("messageId",			Integer.class,	"INTEGER",			"NOT NULL GENERATED BY DEFAULT AS IDENTITY"));
		t.addColumn(new DatabaseColumn("homeworkId",		Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("senderId",			Integer.class,	"INTEGER",			"NOT NULL"));
		t.addColumn(new DatabaseColumn("creationDate",	Timestamp.class,"TIMESTAMP",		"NOT NULL"));
		t.addColumn(new DatabaseColumn("content",				String.class,		"VARCHAR(300)",	"NOT NULL"));
		tables.put(t.getName(), t);

		return tables;
	}

}
